name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.9, 3.10, 3.11, 3.12, 3.13]
        exclude:
          # Exclude some combinations to reduce job count
          - os: ubuntu-latest
            python-version: 3.9
          - os: ubuntu-latest  
            python-version: 3.10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy black flake8 isort

    - name: Format check with black
      run: black --check --diff .

    - name: Import sorting check with isort
      run: isort --check-only --diff .

    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type checking with mypy
      run: mypy backend/ cli/ gui/ --ignore-missing-imports
      continue-on-error: true  # Allow failures for now during transition

    - name: Run tests
      run: |
        python -m pytest tests/ -v --tb=short

    - name: Test CLI interface
      run: |
        python main.py --help
        python -m cli.main --help

  build:
    needs: test
    runs-on: windows-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller

    - name: Build executable
      run: |
        pyinstaller --onefile --windowed --name DiskImage-GUI --icon=tools/icon.ico gui/pyqt_app.py || pyinstaller --onefile --windowed --name DiskImage-GUI gui/pyqt_app.py
        pyinstaller --onefile --name DiskImage-CLI --icon=tools/icon.ico main.py || pyinstaller --onefile --name DiskImage-CLI main.py

    - name: Create release artifacts
      run: |
        mkdir release
        copy dist\DiskImage-GUI.exe release\
        copy dist\DiskImage-CLI.exe release\
        copy README.md release\
        copy LICENSE release\
        copy config.json release\

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: DiskImage-Windows-${{ github.sha }}
        path: release/

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Security check with bandit
      run: bandit -r backend/ cli/ gui/ -f json -o bandit-report.json || true

    - name: Safety check for known vulnerabilities
      run: safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports-${{ github.sha }}
        path: |
          bandit-report.json
          safety-report.json
